c
Quest.where("created_at > ?", a.to_f.days.ago)
a.save
a.to_f
Quest.where("created_at > ?", a.days.ago)
a.to_f
a.class
Quest.where("created_at > ?", a.days.ago)
a.to_i
Quest.where("created_at > ?", a.days.ago)
Quest.where(:mother=> current_user )
a
c
@mood
@mood.father_id
@mood.father
@mood.father = f.father
@mood
f.father_id
f.father
f = Parent.find_by(:mother => current_user)
c
parent.father_id 
parent.father_id = user.id
parent.father_id
parent.father = user.id
user.id
parent.father
user
user.save
user
parent.father
parent
user
Parent.find_by( :token => params[:id] )
(byebug)Parent.find_by( :token => params[:id] )
(byebug)nt.father = user.id
nt.father = user.id
exit
Parent.find_by( :token => params[:id] )
user
user.save
user.password = "12345678"
user.save
user.password = "123456"
user.save
user
parent.father_id
parent.father
Parent.find_by( :token => params[:id] )
c
n
user
c
params[:id]
:id
parent
c
parent
user
c
parent.save
parent
parent.father = user
parent
parent = Parent.find_by_token(params[:id])
parent = Parent.find_by_token(parms[:id])
parent.first
parent
user.id
parent.father_id = user.id
parent
parent.father_id = user.id
parent.father = user
user
user.save
user.sexuality = "m"
user = User.new( father_params )
parent =  Parent.where( :token => params[:id] )
 Parent.where( :token => params[:id] )
params.require(:user)
params.require[:user]
params[:user]
params[:email]
params[:id]
params
c
exit
???? =params[:id]
params[:id]
params
c
UserMailer.notify_comment(email, comment, token).deliver_now!
exit
User.all
current_user
c
mail(:to => @email, :cc => user.email ,:subject => "期待您加入2 Lines！")
email
next
c
next
email
next
comment
next
exit
fb_data[:email]
fb_data["email"]
fb_data
fb_data["email"]
c
fb_data
c
exit
rciy
user = User.find_by_ios_token(params[:ios_tokenç
user.save!
user.generate_ios_token
user = User.find_by_ios_token(params[:ios_token])
user = User.find_by_auth_token(params[:ios_token])
c
User.first
currnet_user
